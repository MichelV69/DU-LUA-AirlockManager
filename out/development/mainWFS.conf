name: AirlockManager mainWFS
slots:
  insideSwitch:
    name: insideSwitch
    class: PressureTile
    select: null
    type:
      events: []
      methods: []
  insideDoor:
    name: insideDoor
    class: DetectionZone
    select: null
    type:
      events: []
      methods: []
  outsideSwitch:
    name: outsideSwitch
    class: PressureTile
    select: null
    type:
      events: []
      methods: []
  outsideDoor:
    name: outsideDoor
    class: DetectionZone
    select: null
    type:
      events: []
      methods: []
  insideLight:
    name: insideLight
    class: Element
    select: null
    type:
      events: []
      methods: []
  outsideLight:
    name: outsideLight
    class: Element
    select: null
    type:
      events: []
      methods: []
  middleLight:
    name: middleLight
    class: Element
    select: null
    type:
      events: []
      methods: []
  insideSwitchLight:
    name: insideSwitchLight
    class: Element
    select: null
    type:
      events: []
      methods: []
  outsideSwitchLight:
    name: outsideSwitchLight
    class: Element
    select: null
    type:
      events: []
      methods: []
  statusScreen1:
    name: statusScreen1
    class: ScreenUnit
    select: null
    type:
      events: []
      methods: []
handlers:
  insideSwitch:
    onPressed():
      lua: insideSwitch:triggerEvent('onPressed')
    onReleased():
      lua: insideSwitch:triggerEvent('onReleased')
  insideDoor:
    onEnter(id):
      lua: insideDoor:triggerEvent('onEnter',id)
    onLeave(id):
      lua: insideDoor:triggerEvent('onLeave',id)
  outsideSwitch:
    onPressed():
      lua: outsideSwitch:triggerEvent('onPressed')
    onReleased():
      lua: outsideSwitch:triggerEvent('onReleased')
  outsideDoor:
    onEnter(id):
      lua: outsideDoor:triggerEvent('onEnter',id)
    onLeave(id):
      lua: outsideDoor:triggerEvent('onLeave',id)
  insideLight: {}
  outsideLight: {}
  middleLight: {}
  insideSwitchLight: {}
  outsideSwitchLight: {}
  statusScreen1:
    "onMouseDown(x,y)":
      lua: statusScreen1:triggerEvent('onMouseDown',x,y)
    "onMouseUp(x,y)":
      lua: statusScreen1:triggerEvent('onMouseUp',x,y)
    onOutputChanged(output):
      lua: statusScreen1:triggerEvent('onOutputChanged',output)
  library:
    onStart():
      lua: >-
        ;(function()

        local a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end

        end)()

        ;(function()

        local a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end

        end)()

        package.preload['AirlockManager:globals.lua']=(function()

        -- Initialize globals and constants

        Config = { unused = true }

        DEBUG = true

        INGAME = system ~= nil


        if not INGAME then

            function traceback(o)
                if o then P(tostring(o)) end
            end
        else
            --require 'mockfuncs'
            print=system.print
        end

        P=print


        --- end of file ---


        end)

        package.preload['AirlockManager:common-library.lua']=(function()

        -- some global sample functions for strings

        -- use at your own risk :)

        function EndsWith(s, suffix)
            if not s or not suffix then return false end
            return string.sub(s, -#suffix) == suffix
        end


        function Rtrim(s)
            local res, _ = string.gsub(s, "%s+$", "")
            return res
        end


        function RtrimChar(s,char)
            if not s or not char then return s end
            while #s > 0 and EndsWith(s, char) do
                s = string.sub(s,1,#s - #char)
            end
            return s
        end


        function DumpTable(o)
           -- omitt any spaces in s!
           if type(o) == 'table' then
              local s = '{'
              for k,v in pairs(o) do
                 if type(k) ~= 'number' then k = '"'..k..'"' end
                 s = s .. '['..k..']=' .. DumpTable(v) .. ','
              end
              s = RtrimChar(s,",")
              return s .. '}'
           else
              return tostring(o)
           end
        end


        end)

        package.preload['AirlockManager:app-lib.lua']=(function()

        function statusLights(whichLights, whatAction)
            if string.lower(whichLights) == 'all'
                and string.lower(whatAction) == 'reset' then
                insideLight.deactivate()
                outsideLight.deactivate()
                insideLight.setColor(ws2_blue)
                outsideLight.setColor(ws2_blue)
                insideLight.activate()
                outsideLight.activate()
            end
        end


        function closeAllDoors()
            insideDoor.close()
            outsideDoor.close()
        end


        --- end of file ---


        end)

        package.preload['AirlockManager:app.lua']=(function()

        function app()
            -- Here's to the crazy ones. The misfits. The rebels. The troublemakers.

            -- -- when Switch is pressed, then start the Airlock cycle.
            -- if BOTH Switches are active, reset and ignore

            farSet         = {}
            farSet.switch  = outsideSwitch
            farSet.door    = outsideDoor
            farSet.light   = outsideLight
            farSet.buttonLight = outsideSwitchLight

            nearSet        = {}
            nearSet.switch = insideSwitch
            nearSet.door   = insideDoor
            nearSet.light  = insideLight

            if outsideSwitch.active() then
                farSet.switch  = insideSwitch
                farSet.door    = insideDoor
                farSet.light   = insideLight
                nearSet.switch = outsideSwitch
                nearSet.door   = outsideDoor
                nearSet.light  = outsideLight
            end
            -- -- -- ensure far door closed
            farSet.door.close()
            -- -- -- open near door
            nearSet.door.open()
            -- -- -- set far door status light (red)
            farSet.light.setColor(red)
            -- -- -- set near door status light (green)
            nearSet.light.setColor(green)
            -- -- -- set far door Switch color (red)
            -- -- -- set near door Switch color (blue)
            -- -- -- update screens with process status
            -- -- -- wait six seconds
            -- -- -- close near door
            -- -- -- set near door status light (red)
            -- -- -- set near door Switch color (red)
            -- -- -- update screens with process status
            -- -- -- play airlock sound effect
            -- -- -- wait three seconds
            -- -- -- open far door
            -- -- -- set far door status light (yellow)
            -- -- -- update screens with process status
            -- -- -- wait six seconds
            -- -- -- close far door
            -- -- -- set near door status light (green)
            -- -- -- set near door Switch color (green)
            -- -- -- set far door status light (green)
            -- -- -- set far door Switch color (green)
            -- -- -- update screens with process status
            -- exit
        end


        --- end of file ---


        end)

        library.addEventHandlers(library)

        library.addEventHandlers(system)

        library.addEventHandlers(player)

        library.addEventHandlers(construct)

        library.addEventHandlers(unit)

        library.addEventHandlers(insideSwitch)

        library.addEventHandlers(insideDoor)

        library.addEventHandlers(outsideSwitch)

        library.addEventHandlers(outsideDoor)

        library.addEventHandlers(insideLight)

        library.addEventHandlers(outsideLight)

        library.addEventHandlers(middleLight)

        library.addEventHandlers(insideSwitchLight)

        library.addEventHandlers(outsideSwitchLight)

        library.addEventHandlers(statusScreen1)
  system:
    onActionStart(action):
      lua: system:triggerEvent('onActionStart',action)
    onActionLoop(action):
      lua: system:triggerEvent('onActionLoop',action)
    onActionStop(action):
      lua: system:triggerEvent('onActionStop',action)
    onUpdate():
      lua: system:triggerEvent('onUpdate')
    onFlush():
      lua: system:triggerEvent('onFlush')
    onInputText(text):
      lua: system:triggerEvent('onInputText',text)
    onCameraChanged(mode):
      lua: system:triggerEvent('onCameraChanged',mode)
  player:
    "onParentChanged(oldId,newId)":
      lua: player:triggerEvent('onParentChanged',oldId,newId)
  construct:
    onDocked(id):
      lua: construct:triggerEvent('onDocked',id)
    onUndocked(id):
      lua: construct:triggerEvent('onUndocked',id)
    onPlayerBoarded(id):
      lua: construct:triggerEvent('onPlayerBoarded',id)
    onVRStationEntered(id):
      lua: construct:triggerEvent('onVRStationEntered',id)
    onConstructDocked(id):
      lua: construct:triggerEvent('onConstructDocked',id)
    onPvPTimer(active):
      lua: construct:triggerEvent('onPvPTimer',active)
  unit:
    onStop():
      lua: unit:triggerEvent('onStop')
    onTimer(timerId):
      lua: unit:triggerEvent('onTimer',timerId)
    onStart():
      lua: >-
        -- DU-LuaC template with fixed slots by tobitege


        -- This script is drafted to have this project entry point load most

        -- required code parts via xpcall's for error handling.

        -- Generally speaking such parts can be:

        --  * globals -> as the name suggests ;)

        --  * startup -> not used in this entry point!

        --  * library -> any shared, independent objects and functions

        --  * events -> DU-LuaC assignment of code to specific element's events

        --  * main -> the actual main code of this project


        -- First some setup code to allow debugging in VSCode.

        -- These 2 lines do not interfere ingame but allow the use

        -- of debuggers running the script outside of the game.

        ---@diagnostic disable: param-type-mismatch

        package.path = "./util/?.lua;" .. package.path

        package.path = package.path .. ";./util/du-mocks/?.lua"


        -- File with commonly shared, independent global constants and switches etc.

        -- This is for use across multiple project entry points.

        require('AirlockManager:globals.lua')


        -- Sanity Check

        local bootErrors = 0

        if not outsideSwitch then bootErrors = bootErrors + 1 end

        if not insideSwitch then bootErrors = bootErrors + 1 end


        if not outsideDoor then bootErrors = bootErrors + 1 end

        if not insideDoor then bootErrors = bootErrors + 1 end


        if not outsideLight then bootErrors = bootErrors + 1 end

        if not insideLight then bootErrors = bootErrors + 1 end


        if bootErrors then
            p(" >> Boot Error.  Missing Crucial Equipment.")
            p(" >> >> need 2 slots buttons, 2 slots doors, 2 slots lights")
            unit.exit()
        end


        -- The "common-library" could contain commonly shared functions

        -- for use across multiple project entries.

        -- Remove or replace as needed!

        local status, err, _ = xpcall(function() require('AirlockManager:common-library.lua') end, traceback)

        if not status then
            P("[E] Error in common-library!")
            if err then P(err) end
            unit.exit()
            return
        end


        -- Event example: attach code to the screen's onOutputChanged event.

        -- This assumes the code in the file to return a table with a Run function

        -- and 1 parameter (here "output" is coming from the screen)!

        -- This ONLY works with the screen being a fixed slot in the project file

        -- as otherwise DU-LuaC won't be able to add its event handler code

        -- in the corresponding LUA section!


        --- local screenEvent = require('main-screen.onOutputChanged')

        --- if screenEvent ~= nil then

        ---     -- important: event names start lowercase!

        ---     MyScreen:onEvent('onOutputChanged', function (self, output) screenEvent.Run(output) end)

        --- end

        ---

        --- -- Require the main script's code and in case of error, stop the board

        --- status, err, _ = xpcall(function() require('main-onStart') end, traceback)

        --- if not status then

        ---     P("[E] Error in main-onStart!")

        ---     if err then P(err) end

        ---     unit.exit()

        --- end


        -- Any additional code can be placed here

        P("Script pre-load finished.")

        require('AirlockManager:app-lib.lua')

        require('AirlockManager:app.lua')


        -- Optionally hide the programming board widget

        --unit.hideWidget()


        app()


        --- end of file ---
