{"slots":{"-5":{"name":"library","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}}},"handlers":[{"key":1,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":";(function()\nlocal a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end\nend)()"},{"key":2,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":";(function()\nlocal a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end\nend)()"},{"key":3,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":"package.preload['AirlockManager:globals.lua']=(function()\n-- Initialize globals and constants\nConfig = { core = nil, c_required=true, databanks = {}, db_required=true, screens = {}, s_required=true }\nDEBUG = false\nINGAME = system ~= nil\n\nif not INGAME then\n\n    function traceback(o)\n        if o then P(tostring(o)) end\n    end\nelse\n    --require 'mockfuncs'\n    print=system.print\nend\nP=print\nend)\npackage.preload['AirlockManager:common-library.lua']=(function()\n-- some global sample functions for strings\n-- use at your own risk :)\nfunction EndsWith(s, suffix)\n    if not s or not suffix then return false end\n    return string.sub(s, -#suffix) == suffix\nend\n\nfunction Rtrim(s)\n    local res, _ = string.gsub(s, \"%s+$\", \"\")\n    return res\nend\n\nfunction RtrimChar(s,char)\n    if not s or not char then return s end\n    while #s > 0 and EndsWith(s, char) do\n        s = string.sub(s,1,#s - #char)\n    end\n    return s\nend\n\nfunction DumpTable(o)\n   -- omitt any spaces in s!\n   if type(o) == 'table' then\n      local s = '{'\n      for k,v in pairs(o) do\n         if type(k) ~= 'number' then k = '\"'..k..'\"' end\n         s = s .. '['..k..']=' .. DumpTable(v) .. ','\n      end\n      s = RtrimChar(s,\",\")\n      return s .. '}'\n   else\n      return tostring(o)\n   end\nend\n\nend)"},{"key":4,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":"library.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)"},{"key":5,"filter":{"slotKey":-4,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionStart',action)"},{"key":6,"filter":{"slotKey":-4,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionLoop',action)"},{"key":7,"filter":{"slotKey":-4,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionStop',action)"},{"key":8,"filter":{"slotKey":-4,"signature":"onUpdate()","args":[]},"code":"system:triggerEvent('onUpdate')"},{"key":9,"filter":{"slotKey":-4,"signature":"onFlush()","args":[]},"code":"system:triggerEvent('onFlush')"},{"key":10,"filter":{"slotKey":-4,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onInputText',text)"},{"key":11,"filter":{"slotKey":-4,"signature":"onCameraChanged(mode)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onCameraChanged',mode)"},{"key":12,"filter":{"slotKey":-3,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"player:triggerEvent('onParentChanged',oldId,newId)"},{"key":13,"filter":{"slotKey":-2,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onDocked',id)"},{"key":14,"filter":{"slotKey":-2,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onUndocked',id)"},{"key":15,"filter":{"slotKey":-2,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onPlayerBoarded',id)"},{"key":16,"filter":{"slotKey":-2,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onVRStationEntered',id)"},{"key":17,"filter":{"slotKey":-2,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onConstructDocked',id)"},{"key":18,"filter":{"slotKey":-2,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onPvPTimer',active)"},{"key":19,"filter":{"slotKey":-1,"signature":"onStop()","args":[]},"code":"unit:triggerEvent('onStop')"},{"key":20,"filter":{"slotKey":-1,"signature":"onTimer(timerId)","args":[{"variable":"*"}]},"code":"unit:triggerEvent('onTimer',timerId)"},{"key":21,"filter":{"slotKey":-1,"signature":"onStart()","args":[]},"code":"\n\n-- DU-LuaC template with fixed slots by tobitege\n-- Script requires screen and databank to be linked in this fixed order!!!\n\n-- This script is drafted to have this project entry point load most\n-- required code parts via xpcall's for error handling.\n-- Generally speaking such parts can be:\n--  * globals -> as the name suggests ;)\n--  * startup -> not used in this entry point!\n--  * library -> any shared, independent objects and functions\n--  * events -> DU-LuaC assignment of code to specific element's events\n--  * main -> the actual main code of this project\n\n-- First some setup code to allow debugging in VSCode.\n-- These 2 lines do not interfere ingame but allow the use\n-- of debuggers running the script outside of the game.\n---@diagnostic disable: param-type-mismatch\npackage.path = \"lua/?.lua;util/?.lua;\"..package.path\n\n-- File with commonly shared, independent global constants and switches etc.\n-- This is for use across multiple project entry points.\nrequire('AirlockManager:globals.lua')\n\n-- Compared to the \"main.lua\" script, we don't use the \"startup\" file \n-- here since slots are fixed and named!\n\n-- Since the project file specifies named slots, we now must\n-- check for \"MyScreen\" and \"MyDB\" to actually exist or error out:\nif not MyScreen or not MyDB then\n    P(\"[E] First link screen, then databank!\")\n    unit.exit()\n    return\nend\n\n-- The \"common-library\" could contain commonly shared functions\n-- for use across multiple project entries.\n-- Remove or replace as needed!\nlocal status, err, _ = xpcall(function() require('AirlockManager:common-library.lua') end, traceback)\nif not status then\n    P(\"[E] Error in common-library!\")\n    if err then P(err) end\n    unit.exit()\n    return\nend\n\n-- Event example: attach code to the screen's onOutputChanged event.\n-- This assumes the code in the file to return a table with a Run function\n-- and 1 parameter (here \"output\" is coming from the screen)!\n-- This ONLY works with the screen being a fixed slot in the project file\n-- as otherwise DU-LuaC won't be able to add its event handler code\n-- in the corresponding LUA section!\nlocal screenEvent = require('main-screen.onOutputChanged')\nif screenEvent ~= nil then\n    -- important: event names start lowercase!\n    MyScreen:onEvent('onOutputChanged', function (self, output) screenEvent.Run(output) end)\nend\n\n-- Require the main script's code and in case of error, stop the board\nstatus, err, _ = xpcall(function() require('main-onStart') end, traceback)\nif not status then\n    P(\"[E] Error in main-onStart!\")\n    if err then P(err) end\n    unit.exit()\nend\n\n-- Any additional code can be placed here\nP(\"Script finished.\")\n\n-- Optionally hide the programming board widget\n--unit.hideWidget()\n\n-- Optionally end the script now\nunit.exit()"}],"events":[],"methods":[]}